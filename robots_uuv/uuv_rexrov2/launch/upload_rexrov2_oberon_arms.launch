<launch>
  <arg name="debug" default="0"/>

  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="-20"/>
  <arg name="roll" default="0.0"/>
  <arg name="pitch" default="0.0"/>
  <arg name="yaw" default="0.0"/>

  <arg name="use_geodetic" default="false"/>
  <arg name="latitude" default="0"/>
  <arg name="longitude" default="0"/>
  <arg name="depth" default="0"/>

  <arg name="latitude_ref" default="0"/>
  <arg name="longitude_ref" default="0"/>
  <arg name="altitude_ref" default="0"/>

  <arg name="namespace" default="rexrov2"/>
  <arg name="use_simplified_mesh" default="false"/>
  <arg name="world_frame" default="world"/>

  <group ns="$(arg namespace)">
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find rexrov2_description)/robots/rexrov2_oberon_arms.xacro' --inorder
                                             use_simplified_mesh:=$(arg use_simplified_mesh)
                                             debug:=$(arg debug)
                                             namespace:=$(arg namespace)
                                             inertial_reference_frame:=$(arg world_frame)" />

   <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   <group if="$(arg use_geodetic)">
     <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
           args="-urdf -latitude $(arg latitude) -longitude $(arg longitude) -depth $(arg depth) -latitude_ref $(arg latitude_ref) -longitude_ref $(arg longitude_ref) -altitude_ref $(arg altitude_ref) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
   </group>

   <group unless="$(arg use_geodetic)">
     <node name="urdf_spawner" pkg="uuv_descriptions" type="spawn_model" respawn="false" output="screen"
           args="-urdf -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg roll) -P $(arg pitch) -Y $(arg yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description"/>
   </group>

    <!-- A joint state publisher plugin already is started with the model, no need to use the default joint state publisher -->

    <!-- Robot state publisher subscribes to the custom joint state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <param name="robot_description" value="/$(arg namespace)/robot_description" />
    </node>
  </group>

  <rosparam param="$(arg namespace)/arms/n_arms">
    2
  </rosparam>

  <rosparam param="$(arg namespace)/arms/names">
    [oberon7, oberon4]
  </rosparam>

  <group ns="$(arg namespace)/arms/oberon7">
    <rosparam file="$(find oberon7_description)/params/robot_config.yaml" command="load"/>
  </group>

  <group ns="$(arg namespace)/arms/oberon4">
    <rosparam file="$(find oberon4_description)/params/robot_config.yaml" command="load"/>
  </group>

  <include file="$(find uuv_assistants)/launch/message_to_tf.launch">
    <arg name="namespace" value="$(arg namespace)"/>
  </include>
</launch>
