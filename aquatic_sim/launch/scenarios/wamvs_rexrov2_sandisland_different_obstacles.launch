<!-- Demo RexRov2 pid controller -->
<launch>
    <arg name="record" default="false" doc="Set this flag to true to call record.launch"/>
    <arg name="bag_filename" default="recording.bag" doc="Name of the output ROS bag file in case record is set to true"/>
    <arg name="use_ned_frame" default="false" doc="If true, uses the NED (North-East-Down) frame conversion. If false, ENU (East-North-Up) will be used per default."/>

    <!-- RexRov2's initial position -->
    <arg name="x" default="0" doc="X coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="y" default="0" doc="Y coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="z" default="-5" doc="Z coordinate of the vehicle's initial position (in ENU)"/>
    <arg name="yaw" default="0" doc="Yaw angle of the vehicle's initial orientation"/>

    <arg name="teleop_on" default="false" doc="If true, the teleop node will be started"/>
    <arg name="joy_id" default="0" doc="Joystick ID"/>

    <include file="$(find usv_uuv_simulation)/launch/worlds/ocean_different_obstacles.launch"/>

    <include file="$(find uuv_simulation_wrapper)/launch/unpause_simulation.launch">
        <arg name="timeout" value="5"/>
    </include>

    <include file="$(find usv_uuv_simulation)/launch/robots/upload_rexrov2_beacon.launch">
        <arg name="x" value="$(arg x)"/>
        <arg name="y" value="$(arg y)"/>
        <arg name="z" value="$(arg z)"/>
        <arg name="yaw" value="$(arg yaw)"/>
        <arg name="use_ned_frame" value="$(arg use_ned_frame)"/>
    </include>

    <include file="$(find usv_uuv_simulation)/launch/robots/rexrov2_pid_controller.launch">
        <arg name="teleop_on" value="$(arg teleop_on)"/>
        <arg name="joy_id" value="$(arg joy_id)"/>
        <arg name="use_ned_frame" value="$(arg use_ned_frame)"/>
    </include>

    <include file="$(find rexrov2_gazebo)/launch/record.launch">
      <arg name="record" value="$(arg record)"/>
      <arg name="bag_filename" value="$(arg bag_filename)"/>
    </include>


  <!-- Load WAM-Vs -->

  <env name="ROSCONSOLE_CONFIG_FILE" value="$(find vrx_gazebo)/config/custom_rosconsole.conf"/>
  <!-- If true, run gazebo GUI -->
  <arg name="gui" default="true" />
  <!-- If true, run gazebo in verbose mode -->
  <arg name="verbose" default="false"/>
  <!-- Set various other gazebo arguments-->
  <arg name="extra_gazebo_args" default=""/>
  <!-- Start in a default namespace 
  <arg name="namespace" default="wamv"/>-->
  <!-- Do we lock the vessel to the world? -->
  <arg name="wamv_locked" default="false" />
  <!-- Start paused? -->
  <arg name="paused" default="false"/>

<arg name="thrust_config" default="T" />

  <!-- Do we load the VRX sensor suite? -->
  <arg name="vrx_sensors_enabled" default="true" />

<!-- Load robot model -->
  <!-- Determine which model -->
  <arg name="h_config" value="$(eval int((thrust_config)=='H'))"/>
  <arg name="t_config" value="$(eval int((thrust_config)=='T'))"/>
  <arg name="x_config" value="$(eval int((thrust_config)=='X'))"/>

<!-- For now - can only use the T configuration! -->
  <arg if="$(arg t_config)" name="urdf" default="$(find wamv_gazebo)/urdf/wamv_gazebo.urdf.xacro"/>


  <!-- Here we create the WAMVs army! -->
  
  <param name="wamv0/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=wamv0"/>

  <param name="wamv1/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=wamv1"/>

  <param name="wamv2/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=wamv2"/>

  <param name="wamv3/robot_description"
         command="$(find xacro)/xacro &#x002D;&#x002D;inorder '$(arg urdf)'
         locked:=$(arg wamv_locked)		   
         thruster_config:=$(arg thrust_config)
         vrx_sensors_enabled:=$(arg vrx_sensors_enabled)
         namespace:=wamv3"/>

  <!-- Spawn wamv0 in Gazebo -->
  <node name="spawn_model_wamv0" pkg="gazebo_ros" type="spawn_model"
        args="-x 10 -y 0 -z 0
              -R 0 -P 0 -Y 0
              -urdf -param wamv0/robot_description -model wamv0"/>

  <!-- Spawn wamv1 in Gazebo -->
  <node name="spawn_model_wamv1" pkg="gazebo_ros" type="spawn_model"
        args="-x -10 -y 0 -z 0
              -R 0 -P 0 -Y 0
              -urdf -param wamv1/robot_description -model wamv1"/>

  <!-- Spawn wamv2 in Gazebo -->
  <node name="spawn_model_wamv2" pkg="gazebo_ros" type="spawn_model"
        args="-x 0 -y 10 -z 0
              -R 0 -P 0 -Y 0
              -urdf -param wamv2/robot_description -model wamv2"/>

  <!-- Spawn wamv3 in Gazebo -->
  <node name="spawn_model_wamv3" pkg="gazebo_ros" type="spawn_model"
        args="-x 0 -y -10 -z 0
              -R 0 -P 0 -Y 0
              -urdf -param wamv3/robot_description -model wamv3"/>


  <!-- SEND WAYPOINTS -->

  <arg name="uuv_name" default="rexrov2" />
  <arg name="filename" default="$(find uuv_control_utils)/config/example_waypoints.yaml"/>
  <arg name="start_time" default="-1"/>
  <arg name="interpolator" default="dubins"/>

  <group ns="$(arg uuv_name)">
    <node pkg="uuv_control_utils"
          type="send_waypoint_file.py"
          name="send_waypoint_file"
          output="screen">
          <rosparam subst_value="true">
            filename: $(arg filename)
            start_time: $(arg start_time)
            interpolator: $(arg interpolator)
          </rosparam>
    </node>
  </group>
  
</launch>
