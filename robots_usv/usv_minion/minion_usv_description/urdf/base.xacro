<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <!-- Loading some constants -->
  <!-- <xacro:include filename="$(find uuv_descriptions)/models/common/urdf/common.urdf.xacro"/> -->
  <xacro:include filename="$(find uuv_descriptions)/urdf/common.urdf.xacro"/>
  <!-- Loading file with sensor macros -->
  <xacro:include filename="$(find uuv_sensor_ros_plugins)/urdf/sensor_snippets.xacro"/>
  <!-- Loading vehicle's specific macros -->
  <xacro:include filename="$(find minion_usv_description)/urdf/snippets.xacro"/>

  <!-- ADDED  -->
  <xacro:include filename="$(find uuv_gazebo_ros_plugins)/urdf/snippets.xacro"/>

  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->
  <!-- Mass -->
  <xacro:property name="mass" value="3"/>
  <!-- Describing the dimensions of the vehicle's bounding box: width, length, height -->
  <xacro:property name="x_size" value="0.401"/>
  <xacro:property name="y_size" value="0.401"/>
  <xacro:property name="z_size" value="0.201"/> <!-- 0.201 -->
  <!-- minion_usv_height is not really! It's just for run... We need first calculate the Fossen parameters -->
  <!-- Volume -->
  <xacro:property name="volume" value="0.016923"/> <!--  ${(4/3)*3.1415*x_size*y_size*z_size} 0.039 -->
  <!-- Center of gravity -->
  <xacro:property name="cog" value="-0.025 0 0"/>
  <!--
  Center of buoyancy according to eq. (3.1) p. 28 in Berg2012.
  The original values, [0.0822, -0.00773, 0.3872] however, seem to
  assume NWU (otherwise cob is below cog?). 0.155
  -->
  <xacro:property name="cob" value="0 0 0"/>
  <!-- Fluid density -->
  <xacro:property name="rho" value="1028"/>
  <!--
    Visual mesh file for the vehicle, usually in DAE (Collada) format. Be sure to store the
    mesh with the origin of the mesh on the same position of the center of mass, otherwise
    the mesh pose will have to be corrected below in the <visual> block.
    Open the meshes for the RexROV vehicle in Blender to see an example on the mesh placement.
  -->
  <xacro:property name="visual_mesh_file" value="file://$(find minion_usv_description)/meshes/minion_usv_noprop.dae"/>
  <!-- file://$(find minion_usv_description)/meshes/minion_usv_noprop.dae -->

  <!-- Collision geometry mesh, usually in STL format (it is recommended to keep
  this geometry as simple as possible to improve the performance the physics engine
  regarding the computation of collision forces) -->
  <xacro:property name="collision_mesh_file" value="file://$(find minion_usv_description)/meshes/minion_usv_noprop.stl"/>

  <!-- Vehicle macro -->
  <!-- <xacro:macro name="minion_usv_base" params="namespace debug *gazebo"> -->
  <xacro:macro name="minion_usv_base" params="namespace *gazebo">

      <!-- Rigid body description of the base link -->
      <link name="${namespace}/base_link">
        <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
        <inertial>
          <mass value="${mass}" />
          <origin xyz="${cog}" rpy="0 0 0"/>
          <!-- <inertia ixx="${1*0.12072}" iyy="${1*0.12072}" izz="${1*0.096481}"  iyz="0.0" ixy="0.0" ixz="0.0" /> -->
          <inertia ixx="${1*0.03018}" iyy="${1*0.03018}" izz="${1*0.02412}"  iyz="0.0" ixy="0.0" ixz="0.0" />
        </inertial>

        <!-- This visual geometry representation can be used when running
             tasks in which you need Gazebo to start quickly
        -->
        <!-- <xacro:if value="${use_simplified_mesh}"> -->
        <!-- Code in rexrov2_base.xacro if use the flag use_simplified_mesh -->

        <visual>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${visual_mesh_file}" scale="1 1 1" />
          </geometry>
        </visual>
        <!-- <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <mesh filename="${collision_mesh_file}" scale="1 1 1" />
          </geometry>
        </collision> -->

        <!-- In rexrov2_base they made collision planes -->
        <!-- bottom plate -->
        <collision>
          <origin xyz="0 0 0" rpy="0 0 0"/>
          <geometry>
            <box size="${x_size} ${y_size} ${z_size}"/>
            <!-- <cylinder>
              <radius>${x_size}</radius>
              <length>${z_size}</length>
            </cylinder> -->
          </geometry>
        </collision>
        <!-- top plate -->
        <!-- <collision>
          <origin xyz="0 0 0.60" rpy="0 0 0"/>
          <geometry><box size="2.56 1.50 0.40"/></geometry>
        </collision> -->
        <!-- left / right sides -->
        <!-- <collision> -->
        <!-- <origin xyz="-0.20 0.70 -0.15" rpy="0 0 0"/>
          <geometry><box size="2.20 0.10 1.10"/></geometry>
        </collision>
        <collision>
          <origin xyz="-0.20 -0.70 -0.15" rpy="0 0 0"/>
          <geometry><box size="2.20 0.10 1.10"/></geometry>
        </collision> -->

      </link>

    <gazebo reference="${namespace}/base_link">
      <selfCollide>false</selfCollide>
    </gazebo>

    <!-- Set up hydrodynamic plugin given as input parameter -->
    <xacro:insert_block name="gazebo"/>

    <!-- Include the sensor modules -->
    <xacro:include filename="$(find minion_usv_description)/urdf/sensors.xacro"/>

    <!-- ADDED -->
    <xacro:include filename="$(find minion_usv_description)/urdf/actuators.xacro" />

  </xacro:macro>
</robot>
