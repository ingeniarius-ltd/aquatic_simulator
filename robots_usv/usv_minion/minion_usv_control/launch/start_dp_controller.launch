<launch>
<!-- This launch file will start the controller nodes with the necessary parameters

  Vehicle namespace: since the simulation can run with multiple vehicle, each vehicle
  is created under a namespace, which is per default equal to the name of vehicle model, but
  can be assigned differently at startup
-->

<arg name="uuv_name" default="minion_usv"/>
<!-- Name of the vehicle model: the name of the robot model -->
<arg name="model_name" default="$(arg uuv_name)"/>
<!-- Flag to start recoding a rosbag  -->
<arg name="record" default="false"/>
<!-- Flag to RViz -->
<arg name="gui_on" default="true"/>
<!-- Flag to NED Referential -->
 <arg name="use_ned_frame" default="false"/>

<!-- Control effort saturation -->
<arg name="saturation" default="5000"/>

<!--
The controller parameters are given below and will be given to the controller node in its
private namespace. These are vectors and for roslaunch to see this as one argument, there
can be no spaces between the commas and the floating point values. The default values
are usually the ones that are going to be used.
-->
<arg name="Kp" default="11993.888,11993.888,11993.888,19460.069,19460.069,19460.069"/>
<arg name="Kd" default="9077.459,9077.459,9077.459,18880.925,18880.925,18880.925"/>
<arg name="Ki" default="321.417,321.417,321.417,2096.951,2096.951,2096.951"/>

<!-- Thruster manager configuration: thruster allocation matrix pre-calculated with start_thruster_manager.launch (the recomend) -->
<arg name="thruster_manager_output_dir" default="$(find minion_usv_control)/config"/>
<arg name="thruster_manager_config_file" default="$(find minion_usv_control)/config/thruster_manager.yaml"/>
<!-- File containing the thruster allocation matrix -->
<arg name="tam_file" default="$(find minion_usv_control)/config/TAM.yaml"/>

<!--
It is important to start all nodes relative to this vehicle under the vehicle's
namespace in order to avoid errors and parameter being initialized in wrong place.
Most of the nodes per default are going to look for configuration parameters and
topics under the vehicle's namespace per default.
-->
<group ns="$(arg uuv_name)">
    <!--
    This node just reads the trajectory and waypoint topics and publishes visualization
    markers to RViz, but is not essential to the controller's operation
    -->
    <node pkg="uuv_control_utils"
          type="trajectory_marker_publisher.py"
          name="trajectory_marker_publisher"
          output="screen">
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
    </node>

    <!--
    Start the vehicle controller node. Remember to include this controller's script
    correctly in the CMakeLists.txt file of your catkin package. This can be done by
    adding the following line in the CMakeLists.txt after the line where catkin_package()
    is given:
    catkin_install_python(PROGRAMS scripts/tutorial_dp_controller.py DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION})
    The scripts/tutorial_dp_controller.py file must also be set as an executable as follows
    >> cd <path_to_ros_package>/scripts
    >> chmod 777 tutorial_dp_controller.py
    -->

    <node pkg="uuv_trajectory_control"
        type="dp_pid_controller_base.py"
        name="dp_pid_controller_base"
        output="screen">
        <!-- Remap necessary topics -->
        <remap from="odom" to="pose_gt"/>
        <remap from="trajectory" to="dp_controller/trajectory"/>
        <remap from="input_trajectory" to="dp_controller/input_trajectory"/>
        <remap from="waypoints" to="dp_controller/waypoints"/>
        <remap from="error" to="dp_controller/error"/>
        <remap from="reference" to="dp_controller/reference"/>
        <remap from="thruster_output" to="thruster_manager/input_stamped"/>
        <!-- Set the controller parameters in the node's private namespace-->
        <rosparam subst_value="true">
            saturation: $(arg saturation)
            Kp: [$(arg Kp)]
            Kd: [$(arg Kd)]
            Ki: [$(arg Ki)]
        </rosparam>
    </node>
</group>

<!-- Initialize the recording fo the simulation according to the record flag  -->
<include file="$(find rexrov2_control)/launch/record_demo.launch">
  <arg name="record" value="$(arg record)"/>
  <arg name="use_ned_frame" value="$(arg use_ned_frame)"/>
</include>

<!-- Joystick teleop node  -->
<group if="$(arg teleop_on)">
  <!-- Start joystick teleop node  -->
  <include file="$(find uuv_teleop)/launch/uuv_teleop.launch">
    <arg name="uuv_name" value="$(arg uuv_name)"/>
    <arg name="joy_id" value="$(arg joy_id)"/>
    <arg name="output_topic" value="cmd_vel"/>
    <arg name="message_type" value="twist"/>
    <arg name="axis_yaw" value="$(arg axis_yaw)"/>
    <arg name="axis_x" value="$(arg axis_x)"/>
    <arg name="axis_y" value="$(arg axis_y)"/>
    <arg name="axis_z" value="$(arg axis_z)"/>
    <arg name="gain_yaw" default="0.2"/>
    <arg name="gain_x" default="0.5"/>
    <arg name="gain_y" default="0.5"/>
    <arg name="gain_z" default="0.5"/>
  </include>
</group>

<!-- RViz  -->
<group if="$(arg gui_on)">
  <!-- Start RViz  -->
  <node name="rviz" pkg="rviz" type="rviz" output="screen" args="-d $(find rexrov2_control)/rviz/rexrov2_control.rviz"/>
</group>

</launch>
